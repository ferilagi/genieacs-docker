global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  namespaceOverride: ""
nameOverride: ""
fullnameOverride: ""
clusterDomain: cluster.local
extraDeploy: []
commonLabels: {}
commonAnnotations: {}

diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

image:
  registry: docker.io
  repository: bitnami/mongodb
  tag: 4.4.11-debian-10-r12
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false

schedulerName: ""
architecture: standalone #Change to replicaset in case you want sharding
useStatefulSet: false
auth:
  enabled: true
  rootUser: root
  rootPassword: ""
  usernames: [genieacs]
  passwords: []
  databases: [genieacs] #Default genieacs db
  replicaSetKey: ""
  existingSecret: "genieacs-mongo" #mongo-secret.yaml file
tls:
  enabled: false
  autoGenerated: true
  existingSecret: ""
  caCert: ""
  caKey: ""
  extraDnsNames: []
  mode: requireTLS
  
hostAliases: []
replicaSetName: rs0
replicaSetHostnames: true
enableIPv6: false
directoryPerDB: false
systemLogVerbosity: 0
disableSystemLog: false
disableJavascript: false
enableJournal: true
configuration: ""
replicaSetConfigurationSettings:
  enabled: false
  configuration: {}
existingConfigmap: ""
initdbScripts: {}
initdbScriptsConfigMap: ""
command: []
args: []
extraFlags: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""

annotations: {}
labels: {}
replicaCount: 2
strategyType: RollingUpdate
podManagementPolicy: OrderedReady
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
tolerations: []
topologySpreadConstraints: []
podLabels: {}
podAnnotations: {}
priorityClassName: ""
runtimeClassName: ""
podSecurityContext:
  enabled: true
  fsGroup: 1001
  sysctls: []
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true
resources:
  limits: {}
  requests: {}
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
startupProbe:
  enabled: false
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 30
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}

initContainers: []
sidecars: []
extraVolumeMounts: []
extraVolumes: []
pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""

service:
  nameOverride: ""
  type: ClusterIP
  port: 27017
  portName: mongodb
  nodePort: ""
  clusterIP: ""
  externalIPs: []
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  annotations: {}
externalAccess:
  enabled: false
  autoDiscovery:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.23.1-debian-10-r23
      pullPolicy: IfNotPresent
      pullSecrets: []
    resources:
      limits: {}
      requests: {}
  service:
    type: LoadBalancer
    port: 27017
    loadBalancerIPs: []
    loadBalancerSourceRanges: []
    nodePorts: []
    domain: ""
    annotations: {}
  hidden:
    enabled: false
    service:
      type: LoadBalancer
      port: 27017
      loadBalancerIPs: []
      loadBalancerSourceRanges: []
      nodePorts: []
      domain: ""
      annotations: {}

persistence:
  enabled: true
  medium: ""
  existingClaim: ""
  storageClass: "" # default provisioner, check which provisioner you have available
  accessModes:
    - ReadWriteOnce
  size: 10Gi # Modify with expected usage
  annotations: {}
  mountPath: /bitnami/mongodb
  subPath: ""
  volumeClaimTemplates:
    selector: {}
    requests: {}
    dataSource: {}

serviceAccount:
  create: true
  name: ""
  annotations: {}
rbac:
  create: false
  role:
    rules: []
podSecurityPolicy:
  create: false
  allowPrivilegeEscalation: false
  privileged: false
  spec: {}
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r304
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits: {}
    requests: {}
  securityContext:
    runAsUser: 0

arbiter:
  enabled: true
  configuration: ""
  hostAliases: []
  existingConfigmap: ""
  command: []
  args: []
  extraFlags: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  annotations: {}
  labels: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  runtimeClassName: ""
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    sysctls: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  initContainers: []
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""
  service:
    nameOverride: ""

hidden:
  enabled: false
  configuration: ""
  existingConfigmap: ""
  command: []
  args: []
  extraFlags: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  annotations: {}
  labels: {}
  replicaCount: 1
  strategyType: RollingUpdate
  podManagementPolicy: OrderedReady
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  runtimeClassName: ""
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  initContainers: []
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""
  persistence:
    enabled: true
    medium: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    mountPath: /bitnami/mongodb
    subPath: ""
    volumeClaimTemplates:
      selector: {}
      dataSource: {}

metrics:
  enabled: false #Enable if you have Prometheus stack installed
  image:
    registry: docker.io
    repository: bitnami/mongodb-exporter
    tag: 0.11.2-debian-10-r393
    pullPolicy: IfNotPresent
    pullSecrets: []
  username: ""
  password: ""
  extraFlags: ""
  extraUri: ""
  resources:
    limits: {}
    requests: {}
  containerPort: 9216
  service:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.port }}"
      prometheus.io/path: "/metrics"
    type: ClusterIP
    port: 9216
  livenessProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: 30s
    scrapeTimeout: ""
    relabellings: []
    metricRelabelings: []
    additionalLabels: {}
  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    rules: {}